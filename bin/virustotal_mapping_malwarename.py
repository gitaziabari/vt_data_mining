import urllib
import urllib2
import json
import datetime
import re
#import socket
import sys
from virustotal_data_mapping import *


class virustotal_mapping_name():
    malware_category_keywords = {
        'Adware':    ['adw', 'adware', 'toolbar', 'adspy', 'pup', 'pua', 'unwanted'],
        'Trojware':    ['dialer', 'fakeav', 'dldr', 'backdoor', 'troj', 'trojan', 'horse', 'trojanhorse', 'qhost', 'pws', 'ransom', 'downloader', 'trojware', 'infostealer', 'tr', 'troj_gen'],
        'Worm':      ['worm'],
        'Virus':     ['virus'],
        'Rootkit':   ['rootkit'],
        'Spyware':   ['spyware', 'spy'],
        'Exploit':   ['exp', 'exploit'],
        'Riskware':  ['tool', 'fraudtool', 'hacktool'],
        'Hoax':      ['hoax', 'joke'],
        'POS':       ['pos', 'poscard', 'poscardstealer']} 
    
    malware_category_severities = {
        'ADWARE':    1,
        'TROJWARE':  3,
        'WORM':      3,
        'VIRUS':     3,
        'ROOTKIT':   4,
        'SPYWARE':   2,
        'EXPLOIT':   3,
        'RISKWARE':  2,
        'HOAX':      1,
        'POS':       4,
        'MALWARE':   2,
    }
    
    malware_keyword_blacklist = [
        'agent',
        'application',
        'based',
        'behaveslike',
        'corrupt'
        'crypt',
        'file',
        'gen',
        'generic',
        'heur',
        'heuristic',
        'heuristics',
        'malware',
        'malicious',
        'packed',
        'packer',
        'risk',
        'riskware',
        'suspicious',
        'unknown',
        'variant',
        'w32',
        'win32',
        'android',
        'androidos' ]
    
    malware_platform_mapping = {
        'Win32DLL' : 'Win32',
        'Win32EXE' : 'Win32',
        'unknown'  : 'Unknown' }
    
    
    def __init__(self):
        # Read the configuration
        self.score_threshold = 12
        
        # Create a reverse lookup table so we can go from the keyword to the category quickly
        self.malware_category_lookup = {}
        for category in self.malware_category_keywords:
            for key in self.malware_category_keywords[category]:
                self.malware_category_lookup[key] = category
                # Exclude any keywords that are used to identify the category, since that will go elsewhere
                self.malware_keyword_blacklist.append(key)
    
        
    def create_malware_name(self, report, file_type="Win32"):
        # Create a list of keywords that are found in the malware names reported by all the AV engines
        keyword_list = []
        for key in report:
            if key == "scans":
               old_file_score = 0
               file_score = 0
               val = report.get(key)
               for av_engine in val:
                   av_mal_name =  val.get(av_engine)
                   keyword_list += re.findall(r'[\w]{2,}', av_mal_name.strip().lower())
                   old_file_score += 1
                   if av_engine in engine_score_mapping:
                      file_score += engine_score_mapping[av_engine]
                   else:
                      file_score += 1
               if file_score <= self.score_threshold:
                  continue
        malware_type = self.find_malware_type(keyword_list)  
        if file_type == None:
           malware_platform = "Win32"
          
        else:
           malware_platform = file_type.replace(' ', '')
                
        # We want to map some VirusTotal types to specific values that look more Kaspersky-like
        if malware_platform in self.malware_platform_mapping:
            malware_platform = self.malware_platform_mapping[malware_platform]
    
        # filter version tags and av nomenclature standards
        keyword_list = filter(lambda x: not re.match('[0-9]+$', x), keyword_list)
        keyword_list = filter(lambda x: re.match(r'[\w]{4,}', x), keyword_list)
    
        # delete black-listed keywords
        keyword_list = filter(lambda x: x not in self.malware_keyword_blacklist, keyword_list)
    
        # for each keyword generate a pair (count, keyword) where "count" is the amount of times the keyword appears in
        #  the list
        keyword_list = map(lambda x: (keyword_list.count(x),x), keyword_list)
    
        # delete duplicates
        keyword_list = set(keyword_list)
    
        # sort by count
        keyword_list = sorted(keyword_list, lambda a,b: cmp(b[0],a[0])) # sort by count        
                
        # remove counts
        keyword_list = map(lambda x: x[1], keyword_list)                
                
        if len(keyword_list) != 0:
            malware_name = keyword_list[0].capitalize()
        else:
            malware_name = 'Generic'
                
        return malware_type.upper(), malware_type + '.' + malware_platform + '.' + malware_name
    
    def find_malware_type(self, keyword_list):
        # Create scores for each category
        category_scores = {}
        for category in self.malware_category_keywords:
            category_scores[category] = 0
        for keyword in keyword_list:
            
            if keyword in self.malware_category_lookup:
                category_scores[self.malware_category_lookup[keyword]] += 1
                
        # We should have a dictionary of categories and scores by now.  Pick the category with the highest score
        best_score = -1
        malware_type = 'Malware'
        for category in category_scores:
            if category_scores[category] > best_score:
                best_score = category_scores[category]
                malware_type = category
        return malware_type
        
        
